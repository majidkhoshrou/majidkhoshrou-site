AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "majidkhoshrou-site \u2013 Flask app on Lambda + Lambda Web Adapter."
Parameters:
  AppEnv:
    Type: String
    Default: prod
    Description: Environment name (prod/dev/stage)
  CustomDomainName:
    Type: String
    Default: majidkhoshrou.com
    Description: The primary (apex) domain name
  HostedZoneId:
    Type: String
    Description: Route 53 hosted zone ID for majidkhoshrou.com
  AcmCertificateArn:
    Type: String
    Description: ARN of the ACM certificate in eu-central-1 covering majidkhoshrou.com
      and www.majidkhoshrou.com
Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins:
        - '*'
        AllowHeaders:
        - '*'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-ratelimit
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: k
        AttributeType: S
      KeySchema:
      - AttributeName: k
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 45
      MemorySize: 1024
      Architectures:
      - x86_64
      Tracing: Active
      Environment:
        Variables:
          FLASK_ENV:
            Ref: AppEnv
          ANALYTICS_S3_BUCKET: mk-analytics-221082206645-eu-central-1
          ANALYTICS_S3_KEY: analytics/visits.json
          ANALYTICS_RETENTION_DAYS: '30'
          RATE_TABLE_NAME:
            Ref: RateLimitTable
          RATE_LIMIT: '6'
      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyHttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyHttpApi
            Path: /{proxy+}
            Method: ANY
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - ssm:GetParameter
          - ssm:GetParameters
          - ssm:GetParametersByPath
          Resource:
          - arn:aws:ssm:*:*:parameter/majidkhoshrou/prod/*
        - Effect: Allow
          Action: kms:Decrypt
          Resource: '*'
          Condition:
            ForAnyValue:StringEquals:
              kms:EncryptionContextKeys:
              - aws:ssm:parameter-name
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1/analytics/*
        - Effect: Allow
          Action: s3:ListBucket
          Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1
          Condition:
            StringLike:
              s3:prefix:
              - analytics/*
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
            - RateLimitTable
            - Arn
      ImageUri: flaskfunction:v1
    Metadata:
      DockerContext: /home/majid/projects/majidkhoshrou.github.io/backend
      DockerTag: v1
      Dockerfile: Dockerfile.lambda
      SamResourceId: FlaskFunction
  ApiDomainApex:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName:
        Ref: CustomDomainName
      DomainNameConfigurations:
      - CertificateArn:
          Ref: AcmCertificateArn
        EndpointType: REGIONAL
        SecurityPolicy: TLS_1_2
  ApiMappingApex:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId:
        Ref: MyHttpApi
      DomainName:
        Ref: ApiDomainApex
      Stage: $default
      ApiMappingKey: ''
  DnsApexA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: CustomDomainName
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalHostedZoneId
  DnsApexAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Ref: CustomDomainName
      Type: AAAA
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalHostedZoneId
  ApiDomainWWW:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName:
        Fn::Sub: www.${CustomDomainName}
      DomainNameConfigurations:
      - CertificateArn:
          Ref: AcmCertificateArn
        EndpointType: REGIONAL
        SecurityPolicy: TLS_1_2
  ApiMappingWWW:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId:
        Ref: MyHttpApi
      DomainName:
        Ref: ApiDomainWWW
      Stage: $default
      ApiMappingKey: ''
  DnsWWWA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: www.${CustomDomainName}
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalHostedZoneId
  DnsWWWAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: www.${CustomDomainName}
      Type: AAAA
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalHostedZoneId
Outputs:
  ApiUrl:
    Description: "Invoke URL (execute-api) \u2013 still valid"
    Value:
      Fn::Sub: https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
  ApexUrl:
    Description: Custom domain (apex)
    Value:
      Fn::Sub: https://${CustomDomainName}/
  WwwUrl:
    Description: Custom domain (www)
    Value:
      Fn::Sub: https://www.${CustomDomainName}/
