AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: majidkhoshrou-site â€“ Flask app on Lambda + Lambda Web Adapter.

Parameters:
  AppEnv:
    Type: String
    Default: "prod"
    AllowedValues: ["dev","stage","prod"]
    Description: Environment name (prod/dev/stage)

  HostedZoneId:
    Type: String
    Description: Route 53 hosted zone ID for majidkhoshrou.com (public zone)

  AcmCertificateArn:
    Type: String
    Description: ACM cert ARN in eu-central-1 covering majidkhoshrou.com and *.majidkhoshrou.com

  UseCustomDomain:
    Type: String
    Default: "true"        # prod keeps pretty URLs; for dev you can pass false to save $
    AllowedValues: ["true","false"]
    Description: Whether to create custom domains and Route53 records for this stack

  DevSubdomain:
    Type: String
    Default: "dev"
    Description: Subdomain to use for non-prod (e.g., dev.majidkhoshrou.com)

Conditions:
  IsProd: !Equals [!Ref AppEnv, "prod"]
  UseDomain: !Equals [!Ref UseCustomDomain, "true"]
  UseDomainProd: !And [!Condition IsProd, !Condition UseDomain]
  UseDomainNonProd: !And [!Not [!Condition IsProd], !Condition UseDomain]

Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins: ["*"]
        AllowHeaders: ["*"]
        AllowMethods: ["GET","POST","OPTIONS"]

  # --- DynamoDB table for rate limiting (env-scoped) ---
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-${AppEnv}-ratelimit"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: k
          AttributeType: S
      KeySchema:
        - AttributeName: k
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  # --- Lambda with alias + CodeDeploy canary ---
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 45
      MemorySize: 1024
      Architectures: [x86_64]
      Tracing: Active

      # >>> Option A: zero-downtime rollouts
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
          - !Ref LambdaErrorAlarm     # optional but recommended

      Environment:
        Variables:
          FLASK_ENV: !Ref AppEnv
          ANALYTICS_S3_BUCKET: mk-analytics-221082206645-eu-central-1
          ANALYTICS_S3_KEY: analytics/visits.json
          ANALYTICS_RETENTION_DAYS: "30"
          RATE_TABLE_NAME: !Ref RateLimitTable
          RATE_LIMIT: "6"

      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /{proxy+}
            Method: ANY

      Policies:
        # SSM Parameter Store (env-scoped secrets: /majidkhoshrou/{env}/*)
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - !Sub arn:aws:ssm:*:*:parameter/majidkhoshrou/${AppEnv}/*
            - Effect: Allow
              Action: kms:Decrypt
              Resource: "*"  # (tighten to your CMK if you have one)
              Condition:
                ForAnyValue:StringEquals:
                  kms:EncryptionContextKeys: ["aws:ssm:parameter-name"]

        # S3 for analytics (unchanged)
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1/analytics/*
            - Effect: Allow
              Action: s3:ListBucket
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1
              Condition:
                StringLike:
                  s3:prefix: [ "analytics/*" ]

        # DynamoDB for rate limiting
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt RateLimitTable.Arn

    Metadata:
      Dockerfile: Dockerfile.lambda
      DockerContext: ../../services/mr-m
      DockerTag: v1

  # --- Canary rollback alarm (optional but useful) ---
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: !Sub "${AWS::StackName}-${AppEnv}-lambda-errors"
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
        - Name: FunctionName
          Value: !Ref FlaskFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching

  # ------------------ Custom domains ------------------
  # PROD: apex + www
  ApiDomainApex:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainProd
    Properties:
      DomainName: majidkhoshrou.com
      DomainNameConfigurations:
        - CertificateArn: !Ref AcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ApiDomainWWW:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainProd
    Properties:
      DomainName: www.majidkhoshrou.com
      DomainNameConfigurations:
        - CertificateArn: !Ref AcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ApiMappingApex:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainProd
    Properties:
      ApiId: !Ref MyHttpApi
      DomainName: !Ref ApiDomainApex
      Stage: '$default'
      ApiMappingKey: ''

  ApiMappingWWW:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainProd
    Properties:
      ApiId: !Ref MyHttpApi
      DomainName: !Ref ApiDomainWWW
      Stage: '$default'
      ApiMappingKey: ''

  DnsApexA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainApex.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainApex.RegionalHostedZoneId

  DnsApexAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiDomainApex.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainApex.RegionalHostedZoneId

  DnsWWWA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainWWW.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainWWW.RegionalHostedZoneId

  DnsWWWAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiDomainWWW.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainWWW.RegionalHostedZoneId

  # DEV/NON-PROD: optional pretty subdomain (off by default via params)
  ApiDomainDev:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainNonProd
    Properties:
      DomainName: !Sub "${DevSubdomain}.majidkhoshrou.com"
      DomainNameConfigurations:
        - CertificateArn: !Ref AcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ApiMappingDev:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainNonProd
    Properties:
      ApiId: !Ref MyHttpApi
      DomainName: !Ref ApiDomainDev
      Stage: '$default'

  DnsDevA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainNonProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${DevSubdomain}.majidkhoshrou.com"
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainDev.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainDev.RegionalHostedZoneId

  DnsDevAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainNonProd
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: !Sub "${DevSubdomain}.majidkhoshrou.com"
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiDomainDev.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainDev.RegionalHostedZoneId

Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for the default stage (fallback)
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  CustomBaseUrlApex:
    Condition: UseDomainProd
    Description: Custom domain (apex)
    Value: "https://majidkhoshrou.com/"
  CustomBaseUrlWWW:
    Condition: UseDomainProd
    Description: Custom domain (www)
    Value: "https://www.majidkhoshrou.com/"
  CustomBaseUrlDev:
    Condition: UseDomainNonProd
    Description: Custom domain (non-prod)
    Value: !Sub "https://${DevSubdomain}.majidkhoshrou.com/"
