AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: majidkhoshrou-site â€“ Flask app on Lambda + Lambda Web Adapter.

Parameters:
  AppEnv:
    Type: String
    Default: "prod"
    Description: Environment name (prod/dev/stage)

  HostedZoneId:
    Type: String
    Description: Route 53 hosted zone ID for majidkhoshrou.com (public zone)

  AcmCertificateArn:
    Type: String
    Description: ACM cert ARN in eu-central-1 covering majidkhoshrou.com and www.majidkhoshrou.com

Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        # tighten when ready:
        AllowOrigins: ["*"]
        AllowHeaders: ["*"]
        AllowMethods: ["GET","POST","OPTIONS"]

  # --- DynamoDB table for rate limiting ---
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-ratelimit"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: k
          AttributeType: S
      KeySchema:
        - AttributeName: k
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 45
      MemorySize: 1024
      Architectures: [x86_64]
      Tracing: Active
      Environment:
        Variables:
          FLASK_ENV: !Ref AppEnv

          # --- Analytics in S3 ---
          ANALYTICS_S3_BUCKET: mk-analytics-221082206645-eu-central-1
          ANALYTICS_S3_KEY: analytics/visits.json
          ANALYTICS_RETENTION_DAYS: "30"

          # --- Rate limiter config (DynamoDB in prod) ---
          RATE_TABLE_NAME: !Ref RateLimitTable
          RATE_LIMIT: "6"
      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /{proxy+}
            Method: ANY
      Policies:
        # SSM Parameter Store (secrets fetched at runtime by your code)
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - arn:aws:ssm:*:*:parameter/majidkhoshrou/prod/*
            - Effect: Allow
              Action: kms:Decrypt
              Resource: "*"
              Condition:
                ForAnyValue:StringEquals:
                  kms:EncryptionContextKeys: ["aws:ssm:parameter-name"]
        # S3 for analytics
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1/analytics/*
            - Effect: Allow
              Action: s3:ListBucket
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1
              Condition:
                StringLike:
                  s3:prefix: [ "analytics/*" ]
        # DynamoDB for rate limiting
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt RateLimitTable.Arn
    Metadata:
      Dockerfile: ../../services/mr-m/Dockerfile.lambda
      DockerContext: ../../services/mr-m
      DockerTag: v1

  # --- API Gateway custom domains (apex + www) ---
  ApiDomainApex:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: majidkhoshrou.com
      DomainNameConfigurations:
        - CertificateArn: !Ref AcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  ApiDomainWWW:
    Type: AWS::ApiGatewayV2::DomainName
    Properties:
      DomainName: www.majidkhoshrou.com
      DomainNameConfigurations:
        - CertificateArn: !Ref AcmCertificateArn
          EndpointType: REGIONAL
          SecurityPolicy: TLS_1_2

  # Map both domains to the $default stage (root path)
  ApiMappingApex:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref MyHttpApi
      DomainName: !Ref ApiDomainApex
      Stage: '$default'
      ApiMappingKey: ''

  ApiMappingWWW:
    Type: AWS::ApiGatewayV2::ApiMapping
    Properties:
      ApiId: !Ref MyHttpApi
      DomainName: !Ref ApiDomainWWW
      Stage: '$default'
      ApiMappingKey: ''

  # --- Route 53 records (A/AAAA ALIAS) for apex + www ---
  DnsApexA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainApex.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainApex.RegionalHostedZoneId

  DnsApexAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiDomainApex.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainApex.RegionalHostedZoneId

  DnsWWWA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName: !GetAtt ApiDomainWWW.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainWWW.RegionalHostedZoneId

  DnsWWWAAAA:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Name: www.majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName: !GetAtt ApiDomainWWW.RegionalDomainName
        HostedZoneId: !GetAtt ApiDomainWWW.RegionalHostedZoneId

Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for the default stage (fallback)
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
  CustomBaseUrlApex:
    Description: Custom domain (apex)
    Value: "https://majidkhoshrou.com/"
  CustomBaseUrlWWW:
    Description: Custom domain (www)
    Value: "https://www.majidkhoshrou.com/"
