AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: "majidkhoshrou-site \u2013 Flask app on Lambda + Lambda Web Adapter."
Parameters:
  AppEnv:
    Type: String
    Default: prod
    AllowedValues:
    - dev
    - stage
    - prod
    Description: Environment name (prod/dev/stage)
  HostedZoneId:
    Type: String
    Description: Route 53 hosted zone ID for majidkhoshrou.com (public zone)
  AcmCertificateArn:
    Type: String
    Description: ACM cert ARN in eu-central-1 covering majidkhoshrou.com and *.majidkhoshrou.com
  UseCustomDomain:
    Type: String
    Default: 'true'
    AllowedValues:
    - 'true'
    - 'false'
    Description: Whether to create custom domains and Route53 records for this stack
  DevSubdomain:
    Type: String
    Default: dev
    Description: Subdomain to use for non-prod (e.g., dev.majidkhoshrou.com)
Conditions:
  IsProd:
    Fn::Equals:
    - Ref: AppEnv
    - prod
  UseDomain:
    Fn::Equals:
    - Ref: UseCustomDomain
    - 'true'
  UseDomainProd:
    Fn::And:
    - Condition: IsProd
    - Condition: UseDomain
  UseDomainNonProd:
    Fn::And:
    - Fn::Not:
      - Condition: IsProd
    - Condition: UseDomain
Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins:
        - '*'
        AllowHeaders:
        - '*'
        AllowMethods:
        - GET
        - POST
        - OPTIONS
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName:
        Fn::Sub: ${AWS::StackName}-${AppEnv}-ratelimit
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
      - AttributeName: k
        AttributeType: S
      KeySchema:
      - AttributeName: k
        KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true
  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 45
      MemorySize: 1024
      Architectures:
      - x86_64
      Tracing: Active
      AutoPublishAlias: live
      DeploymentPreference:
        Type: Canary10Percent5Minutes
        Alarms:
        - Ref: LambdaErrorAlarm
      Environment:
        Variables:
          FLASK_ENV:
            Ref: AppEnv
          ANALYTICS_S3_BUCKET: mk-analytics-221082206645-eu-central-1
          ANALYTICS_S3_KEY: analytics/visits.json
          ANALYTICS_RETENTION_DAYS: '30'
          RATE_TABLE_NAME:
            Ref: RateLimitTable
          RATE_LIMIT: '6'
      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyHttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId:
              Ref: MyHttpApi
            Path: /{proxy+}
            Method: ANY
      Policies:
      - Statement:
        - Effect: Allow
          Action:
          - ssm:GetParameter
          - ssm:GetParameters
          - ssm:GetParametersByPath
          Resource:
          - Fn::Sub: arn:aws:ssm:*:*:parameter/majidkhoshrou/${AppEnv}/*
        - Effect: Allow
          Action: kms:Decrypt
          Resource: '*'
          Condition:
            ForAnyValue:StringEquals:
              kms:EncryptionContextKeys:
              - aws:ssm:parameter-name
      - Statement:
        - Effect: Allow
          Action:
          - s3:GetObject
          - s3:PutObject
          Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1/analytics/*
        - Effect: Allow
          Action: s3:ListBucket
          Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1
          Condition:
            StringLike:
              s3:prefix:
              - analytics/*
      - Statement:
        - Effect: Allow
          Action:
          - dynamodb:UpdateItem
          - dynamodb:GetItem
          - dynamodb:PutItem
          Resource:
            Fn::GetAtt:
            - RateLimitTable
            - Arn
      ImageUri: flaskfunction:v1
    Metadata:
      DockerContext: /home/majid/projects/majidkhoshrou-site/services/mr-m
      DockerTag: v1
      Dockerfile: Dockerfile.lambda
      SamResourceId: FlaskFunction
  LambdaErrorAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName:
        Fn::Sub: ${AWS::StackName}-${AppEnv}-lambda-errors
      Namespace: AWS/Lambda
      MetricName: Errors
      Dimensions:
      - Name: FunctionName
        Value:
          Ref: FlaskFunction
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      ComparisonOperator: GreaterThanOrEqualToThreshold
      TreatMissingData: notBreaching
  ApiDomainApex:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainProd
    Properties:
      DomainName: majidkhoshrou.com
      DomainNameConfigurations:
      - CertificateArn:
          Ref: AcmCertificateArn
        EndpointType: REGIONAL
        SecurityPolicy: TLS_1_2
  ApiDomainWWW:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainProd
    Properties:
      DomainName: www.majidkhoshrou.com
      DomainNameConfigurations:
      - CertificateArn:
          Ref: AcmCertificateArn
        EndpointType: REGIONAL
        SecurityPolicy: TLS_1_2
  ApiMappingApex:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainProd
    Properties:
      ApiId:
        Ref: MyHttpApi
      DomainName:
        Ref: ApiDomainApex
      Stage: $default
      ApiMappingKey: ''
  ApiMappingWWW:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainProd
    Properties:
      ApiId:
        Ref: MyHttpApi
      DomainName:
        Ref: ApiDomainWWW
      Stage: $default
      ApiMappingKey: ''
  DnsApexA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name: majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalHostedZoneId
  DnsApexAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name: majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainApex
          - RegionalHostedZoneId
  DnsWWWA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name: www.majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalHostedZoneId
  DnsWWWAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name: www.majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainWWW
          - RegionalHostedZoneId
  ApiDomainDev:
    Type: AWS::ApiGatewayV2::DomainName
    Condition: UseDomainNonProd
    Properties:
      DomainName:
        Fn::Sub: ${DevSubdomain}.majidkhoshrou.com
      DomainNameConfigurations:
      - CertificateArn:
          Ref: AcmCertificateArn
        EndpointType: REGIONAL
        SecurityPolicy: TLS_1_2
  ApiMappingDev:
    Type: AWS::ApiGatewayV2::ApiMapping
    Condition: UseDomainNonProd
    Properties:
      ApiId:
        Ref: MyHttpApi
      DomainName:
        Ref: ApiDomainDev
      Stage: $default
  DnsDevA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainNonProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: ${DevSubdomain}.majidkhoshrou.com
      Type: A
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainDev
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainDev
          - RegionalHostedZoneId
  DnsDevAAAA:
    Type: AWS::Route53::RecordSet
    Condition: UseDomainNonProd
    Properties:
      HostedZoneId:
        Ref: HostedZoneId
      Name:
        Fn::Sub: ${DevSubdomain}.majidkhoshrou.com
      Type: AAAA
      AliasTarget:
        DNSName:
          Fn::GetAtt:
          - ApiDomainDev
          - RegionalDomainName
        HostedZoneId:
          Fn::GetAtt:
          - ApiDomainDev
          - RegionalHostedZoneId
Outputs:
  ApiInvokeUrl:
    Description: Invoke URL for the default stage (fallback)
    Value:
      Fn::Sub: https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/
  CustomBaseUrlApex:
    Condition: UseDomainProd
    Description: Custom domain (apex)
    Value: https://majidkhoshrou.com/
  CustomBaseUrlWWW:
    Condition: UseDomainProd
    Description: Custom domain (www)
    Value: https://www.majidkhoshrou.com/
  CustomBaseUrlDev:
    Condition: UseDomainNonProd
    Description: Custom domain (non-prod)
    Value:
      Fn::Sub: https://${DevSubdomain}.majidkhoshrou.com/
