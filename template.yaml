AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: majidkhoshrou-site â€“ Flask app on Lambda + Lambda Web Adapter.

Parameters:
  AppEnv:
    Type: String
    Default: "prod"
    Description: Environment name (prod/dev/stage)

Resources:
  MyHttpApi:
    Type: AWS::Serverless::HttpApi
    Properties:
      StageName: $default
      CorsConfiguration:
        AllowOrigins: ["*"]       # tighten for your domain
        AllowHeaders: ["*"]
        AllowMethods: ["GET", "POST", "OPTIONS"]

  # --- NEW: DynamoDB table for rate limiting (pay-per-request, TTL enabled) ---
  RateLimitTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub "${AWS::StackName}-ratelimit"
      BillingMode: PAY_PER_REQUEST
      AttributeDefinitions:
        - AttributeName: k
          AttributeType: S
      KeySchema:
        - AttributeName: k
          KeyType: HASH
      TimeToLiveSpecification:
        AttributeName: ttl
        Enabled: true

  FlaskFunction:
    Type: AWS::Serverless::Function
    Properties:
      PackageType: Image
      Timeout: 45
      MemorySize: 1024
      Architectures: [x86_64]
      Tracing: Active
      Environment:
        Variables:
          FLASK_ENV: !Ref AppEnv

          # --- Analytics in S3 ---
          ANALYTICS_S3_BUCKET: mk-analytics-221082206645-eu-central-1
          ANALYTICS_S3_KEY: analytics/visits.json
          ANALYTICS_RETENTION_DAYS: "30"

          # --- Rate limiter config: use DynamoDB in prod ---
          RATE_TABLE_NAME: !Ref RateLimitTable
          RATE_LIMIT: "6"   # daily cap; adjust as you like

          # Secrets are fetched at runtime from SSM by your code.
          # (Do NOT put resolve:ssm-secure here.)
          # SECRET_KEY and TURNSTILE_SITE_KEY can also be fetched by your code.
      Events:
        Root:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /
            Method: ANY
        Proxy:
          Type: HttpApi
          Properties:
            ApiId: !Ref MyHttpApi
            Path: /{proxy+}
            Method: ANY
      Policies:
        # --- SSM Parameter Store (for secrets at runtime) ---
        - Statement:
            - Effect: Allow
              Action:
                - ssm:GetParameter
                - ssm:GetParameters
                - ssm:GetParametersByPath
              Resource:
                - arn:aws:ssm:*:*:parameter/majidkhoshrou/prod/*
            - Effect: Allow
              Action: kms:Decrypt
              Resource: "*"
              Condition:
                ForAnyValue:StringEquals:
                  kms:EncryptionContextKeys: ["aws:ssm:parameter-name"]

        # --- S3 permissions for analytics file ---
        - Statement:
            - Effect: Allow
              Action:
                - s3:GetObject
                - s3:PutObject
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1/analytics/*
            - Effect: Allow
              Action: s3:ListBucket
              Resource: arn:aws:s3:::mk-analytics-221082206645-eu-central-1
              Condition:
                StringLike:
                  s3:prefix:
                    - analytics/*

        # --- NEW: DynamoDB permissions for rate limiting ---
        - Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
                - dynamodb:PutItem
              Resource: !GetAtt RateLimitTable.Arn

    Metadata:
      Dockerfile: Dockerfile.lambda
      DockerContext: backend
      DockerTag: v1

Outputs:
  ApiUrl:
    Description: Invoke URL for your Flask app
    Value: !Sub "https://${MyHttpApi}.execute-api.${AWS::Region}.amazonaws.com/"
